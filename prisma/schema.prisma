generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Users {
  id String @id() @default(uuid())
  username String
  email String @unique
  password String
  token String?
  refresh_token String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  member_of_projects UserMemberOfProjects[]
  author_of_projects Projects[]
  comments_creted Comments[]
  tasks Tasks[]
  avatar Avatar[]
}

model Projects {
  id String @id() @default(uuid())
  name String
  description String
  start_date DateTime?
  observations String?
  started Boolean?
  delivery_date DateTime?
  status String?
  category String[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  members UserMemberOfProjects[]
  author Users @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id String
  tasks Tasks[]

  @@unique([author_id, name])
}

model UserMemberOfProjects {
  user Users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String
  project Projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String

  @@id([user_id, project_id])
}

model Tasks {
  id String @id @default(cuid())
  title String
  description String
  status String
  priority String
  due_date DateTime
  comments Comments[]
  project Projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String
  assigned_to Users @relation(fields: [assigned_to_id], references: [id], onDelete: Cascade)
  assigned_to_id String
  created_by_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  
  @@unique([project_id, title, description])
}

model Comments {
  id String @id @default(cuid())
  comment String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  createdBy Users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String
  task Tasks @relation(fields: [task_id], references: [id], onDelete: Cascade)
  task_id String

  @@unique([task_id, user_id])
}

model Avatar {
  id           Int      @id @default(autoincrement()) 
  user         Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id      String   @unique
  filename     String
  mimetype     String
  data         Bytes
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
} 